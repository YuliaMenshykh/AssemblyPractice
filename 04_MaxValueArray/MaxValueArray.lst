     1                                  section	.data
     2                                     
     3 00000000 020005000100040008-     	wordArray dw 2,5,1,4,8,9,1
     3 00000009 0009000100         
     4                                          .TYPE equ 2
     5                                          .SIZEOF equ $-wordArray
     6 0000000E 546865206C61726765-     	msg db "The largest digit is: ", 0xA,0xD 
     6 00000017 737420646967697420-
     6 00000020 69733A200A0D       
     7                                  	len equ $- msg 
     8                                  	
     9                                  segment .bss
    10 00000000 ????                    	largest resb 2  
    11                                  
    12                                  section	.text
    13                                  	global _start       
    14                                  
    15                                  _start:	              
    16                                    
    17 00000000 B907000000                  mov rcx, 7 ;counter for tje loop
    18 00000005 488B3425[00000000]          mov rsi, [wordArray] ;store an adress of the array
    19 0000000D 4831FF                  	xor rdi, rdi ; index 
    20 00000010 4831C0                  	xor rax, rax
    21 00000013 E804000000              	call findMaxValue
    22 00000018 4883E901                	sub rcx,1
    23                                  	
    24                                  findMaxValue:
    25 0000001C 480FB79C3F-             	movzx rbx, Word wordArray[rdi*wordArray.TYPE]
    25 00000021 [00000000]         
    26 00000025 4839D8                  	cmp rax,rbx
    27 00000028 7D03                    	jge notMax
    28 0000002A 4889D8                  	mov rax,rbx	
    29                                  		
    30                                  notMax:
    31 0000002D 48FFC7                  	inc rdi
    32 00000030 E2EA                    	loop findMaxValue ;if not greater
    33                                      
    34                                      
    35                                    ; convert the largest value to a string
    36 00000032 48890425[00000000]          mov [largest], rax    ; store the largest value
    37 0000003A 488B0425[00000000]          mov rax, [largest]
    38 00000042 4883C030                    add rax, '0'          ; convert the integer to ASCII (for digits 0-9)
    39 00000046 48890425[00000000]          mov [largest], rax
    40                                  
    41                                      ; print the message
    42 0000004E B804000000                  mov rax, 4            ; sys_write
    43 00000053 BB01000000                  mov rbx, 1            ; file descriptor (stdout)
    44 00000058 48B9-                       mov rcx, msg          ; message to write
    44 0000005A [0E00000000000000] 
    45 00000062 BA18000000                  mov rdx, len          ; length of message
    46 00000067 CD80                        int 0x80              ; call kernel
    47                                  
    48                                      ; print the largest digit
    49 00000069 B804000000                  mov rax, 4            ; sys_write
    50 0000006E BB01000000                  mov rbx, 1            ; file descriptor (stdout)
    51 00000073 48B9-                       mov rcx, largest      ; address of the largest digit string
    51 00000075 [0000000000000000] 
    52 0000007D BA01000000                  mov rdx, 1            ; length of the largest digit
    53 00000082 CD80                        int 0x80              ; call kernel
    54                                  
    55                                      ; exit
    56 00000084 B801000000                  mov rax, 1            ; sys_exit
    57 00000089 4831DB                      xor rbx, rbx          ; exit code 0
    58 0000008C CD80                        int 0x80              ; call kernel
